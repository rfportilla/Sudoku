from copy import deepcopy
import os
import re
import time
from unittest import TestCase, main
from unittest.mock import patch

from sudoku import Cell, CellValueError, ValueNotPresent, Sudoku, SudokuSolver


sample_tests = [
    {
        'vector': [[0, 1, 4], [0, 2, 5], [0, 3, 1], [0, 6, 7], [1, 0, 9], [1, 8, 1], [2, 0, 6], [2, 4, 3], [2, 5, 8], [3, 0, 2], [3, 4, 6], [3, 6, 8], [4, 1, 8], [4, 2, 9], [4, 3, 3], [4, 5, 7], [4, 6, 6], [4, 7, 1], [5, 2, 4], [5, 4, 1], [5, 8, 3], [6, 3, 7], [6, 4, 5], [6, 8, 6], [7, 0, 1], [7, 8, 5], [8, 2, 7], [8, 5, 3], [8, 6, 1], [8, 7, 9]],
        'grid': [[0, 4, 5, 1, 0, 0, 7, 0, 0], [9, 0, 0, 0, 0, 0, 0, 0, 1], [6, 0, 0, 0, 3, 8, 0, 0, 0], [2, 0, 0, 0, 6, 0, 8, 0, 0], [0, 8, 9, 3, 0, 7, 6, 1, 0], [0, 0, 4, 0, 1, 0, 0, 0, 3], [0, 0, 0, 7, 5, 0, 0, 0, 6], [1, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 7, 0, 0, 3, 1, 9, 0]],
        'solution': [[3, 4, 5, 1, 9, 2, 7, 6, 8], [9, 2, 8, 4, 7, 6, 5, 3, 1], [6, 7, 1, 5, 3, 8, 2, 4, 9], [2, 1, 3, 9, 6, 4, 8, 5, 7], [5, 8, 9, 3, 2, 7, 6, 1, 4], [7, 6, 4, 8, 1, 5, 9, 2, 3], [4, 9, 2, 7, 5, 1, 3, 8, 6], [1, 3, 6, 2, 8, 9, 4, 7, 5], [8, 5, 7, 6, 4, 3, 1, 9, 2]],
    },
    {
        'vector': [[0, 1, 6], [0, 4, 5], [0, 5, 7], [0, 6, 9], [1, 1, 7], [1, 4, 2], [1, 8, 6], [2, 0, 8], [2, 4, 6], [2, 7, 7], [3, 2, 7], [3, 3, 1], [3, 7, 8], [4, 2, 5], [4, 6, 4], [5, 1, 8], [5, 5, 4], [5, 6, 3], [6, 1, 9], [6, 4, 1], [6, 8, 4], [7, 0, 2], [7, 4, 3], [7, 7, 9], [8, 2, 8], [8, 3, 7], [8, 4, 4], [8, 7, 5]],
        'grid': [[0, 6, 0, 0, 5, 7, 9, 0, 0], [0, 7, 0, 0, 2, 0, 0, 0, 6], [8, 0, 0, 0, 6, 0, 0, 7, 0], [0, 0, 7, 1, 0, 0, 0, 8, 0], [0, 0, 5, 0, 0, 0, 4, 0, 0], [0, 8, 0, 0, 0, 4, 3, 0, 0], [0, 9, 0, 0, 1, 0, 0, 0, 4], [2, 0, 0, 0, 3, 0, 0, 9, 0], [0, 0, 8, 7, 4, 0, 0, 5, 0]],
    },
    {
        'vector': [[0, 1, 2], [0, 2, 8], [0, 4, 1], [0, 8, 3], [1, 6, 1], [2, 1, 1], [2, 3, 7], [2, 7, 2], [2, 8, 8], [3, 0, 7], [3, 5, 1], [3, 7, 9], [4, 1, 4], [4, 2, 6], [4, 3, 8], [4, 5, 9], [4, 6, 7], [4, 7, 3], [5, 1, 8], [5, 3, 4], [5, 8, 1], [6, 0, 4], [6, 1, 9], [6, 5, 6], [6, 7, 8], [7, 2, 3], [8, 0, 8], [8, 4, 9], [8, 6, 6], [8, 7, 1]],
        'grid': [[0, 2, 8, 0, 1, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 7, 0, 0, 0, 2, 8], [7, 0, 0, 0, 0, 1, 0, 9, 0], [0, 4, 6, 8, 0, 9, 7, 3, 0], [0, 8, 0, 4, 0, 0, 0, 0, 1], [4, 9, 0, 0, 0, 6, 0, 8, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 9, 0, 6, 1, 0]],
    }
]

def sample(i:int, k:str):
    return deepcopy(sample_tests[i][k])



class TestCells(TestCase):
    def testCreateCellHasProperties(self):
        o = Cell()
        attrs = ('notes', 'x', 'y', 'value', '_min', '_max', 'pos')
        for attr in attrs:
            self.assertTrue(hasattr(o, attr))

    def testValueOutOfRange(self):
        o = Cell()
        with self.assertRaises(CellValueError):
            o.value = o._max + 1
        with self.assertRaises(CellValueError):
            o.value = o._min - 1

    def testValueGetsSet(self):
        o = Cell()
        o.value = 3
        self.assertEqual(o, 3)

    def testValueParamSet(self):
        o = Cell(3)
        self.assertEqual(o, 3)

    def testTValueGetsSet(self):
        o = Cell()
        o.tvalue = 3
        self.assertEqual(o, 0)
        self.assertEqual(o.tvalue, 3)

    def testTValueReset(self):
        o = Cell()
        o.tvalue = 3
        self.assertEqual(o.tvalue, 3)
        o.reset_tvalue()
        self.assertEqual(o.tvalue, 0)

    def testTValueSetValue(self):
        o = Cell()
        o.tvalue = 3
        self.assertEqual(o, 0)
        o.set_tvalue()
        self.assertEqual(o, 3)

    def testTValueShowsValue(self):
        o = Cell(5)
        self.assertEqual(o.tvalue, 5)

    def testCellEval(self):
        o = Cell()
        self.assertEqual(o.value, 0)
        o.notes = set([3])
        o.eval()
        self.assertEqual(o.value, 3)

    def testCellNotEval(self):
        o = Cell()
        o.notes = set([3,7])
        o.eval()
        self.assertEqual(o.value, 0)
        
    def testPosXYPassedIn(self):
        o = Cell(x=1, y=3)
        self.assertEqual(o.x, 1)
        self.assertEqual(o.y, 3)

    def testPosXYSet(self):
        o = Cell()
        o.x = 1
        o.y = 3
        self.assertEqual(o.x, 1)
        self.assertEqual(o.y, 3)



class TestCellOperations(TestCase):
    def testInt(self):
        self.assertIsInstance(int(Cell()), int, 'cell does not report type int')
        self.assertEqual(Cell(3), 3)
        self.assertEqual(int(Cell(3)), 3)

    def testLT(self):
        self.assertTrue(Cell(3) < Cell(4))
        self.assertFalse(Cell(5) < Cell(4))
        self.assertFalse(Cell(4) < Cell(4))

    def testGT(self):
        self.assertTrue(Cell(5) > Cell(4))
        self.assertFalse(Cell(3) > Cell(4))
        self.assertFalse(Cell(4) > Cell(4))

    def testLE(self):
        self.assertTrue(Cell(3) <= Cell(4))
        self.assertTrue(Cell(4) <= Cell(4))
        self.assertFalse(Cell(5) <= Cell(4))

    def testGE(self):
        self.assertTrue(Cell(5) >= Cell(4))
        self.assertTrue(Cell(4) >= Cell(4))
        self.assertFalse(Cell(3) >= Cell(4))

    def testEQ(self):
        self.assertTrue(Cell(4) == Cell(4))
        self.assertFalse(Cell(3) == Cell(4))
        self.assertFalse(Cell(5) == Cell(4))

    def testNE(self):
        self.assertTrue(Cell(5) != Cell(4))
        self.assertTrue(Cell(3) != Cell(4))
        self.assertFalse(Cell(4) != Cell(4))

    def testHash(self):
        self.assertEqual(hash(Cell(3)), 3)
        try:
            set([Cell()])
            set([])
        except TypeError as e:
            self.fail('Cell is not hashable: {}'.format(e))



class TestCellNotes(TestCase):
    def testNotesAdd(self):
        o = Cell()
        r = list(range(5))
        for i in r:
            self.assertEqual(o.notes, set(r[0:i]), 'Method add_note did not add note properly: {}'.format(o.notes))
            o.add_note(r[i])

    def testNotesDel(self):
        o = Cell()
        r = list(range(5))
        o.notes = set(range(5))
        for i in r:
            self.assertEqual(o.notes, set(r[i:5]), 'Method add_note did not add note properly: {}'.format(o.notes))
            o.del_note(r[i])

    def testNotesAddOutOfRange(self):
        o = Cell()
        with self.assertRaises(CellValueError):
            o.add_note(o._max + 1)
        with self.assertRaises(CellValueError):
            o.add_note(o._min - 1)

    def testNotesDelNotPresent(self):
        o = Cell()
        o.notes = set(range(5))
        with self.assertRaises(ValueNotPresent):
            o.del_note(6)

    def testNotesShowsWithZeroValue(self):
        o = Cell()
        self.assertEqual(o.notes, set())
        o.notes = set(range(5))
        self.assertEqual(o.notes, set(range(5)))
        o.value = 3
        self.assertEqual(o.notes, set())




class TestSudokuCreate(TestCase):
    def testSudokuIsList(self):
        self.assertIsInstance(Sudoku(), list, 'Sudoku instance is not a list.')

    def testSudokuFromVectorIsList(self):
        self.assertIsInstance(Sudoku.from_vector(), list, 'Sudoku instance is not a list.')

    def testSudokuCreateProperties(self):
        o = Sudoku()
        attrs = ('dimension', 'cells')
        for attr in attrs:
            self.assertTrue(hasattr(o, attr))

    def testSudokuCreateCellsFromList(self):
        Sudoku.dimension = 9
        for i in range(len(sample_tests)):
            o = Sudoku(sample(i, 'grid'))
            self.assertEqual(len(o), Sudoku.dimension)
            for x in o:
                self.assertEqual(len(x), Sudoku.dimension)
                
    def testSudokuCreateCellsFromVector(self):
        Sudoku.dimension = 9
        for i in range(len(sample_tests)):
            o = Sudoku(sample(i, 'grid'))
            self.assertEqual(len(o), Sudoku.dimension)
            for x in o:
                self.assertEqual(len(x), Sudoku.dimension)

    def testSudokuCellValues(self):
        for i in range(len(sample_tests)):
            o = Sudoku(sample(i, 'grid'))
            self.assertEqual(o, sample(i, 'grid'))

        for i in range(len(sample_tests)):
            o = Sudoku.from_vector(sample(i, 'vector'))
            self.assertEqual(o, sample(i, 'grid'))

    def testSudokuCells(self):
        o = Sudoku()
        i = 0
        c = o.cells()
        for cell in c:
            i += 1
            self.assertIsInstance(cell, Cell)
        self.assertEqual(i, 9 ** 2)

    def testResetTestValues(self):
        o = Sudoku()
        with patch.object(Cell, 'reset_tvalue') as mock_reset_tvalue:
            o.reset_test_values()
        mock_reset_tvalue.assert_called()
        self.assertEqual(mock_reset_tvalue.call_count, 9 ** 2)

    def testSetTestValues(self):
        o = Sudoku()
        with patch.object(Cell, 'set_tvalue') as mock_set_tvalue:
            o.set_test_values()
        mock_set_tvalue.assert_called()
        self.assertEqual(mock_set_tvalue.call_count, 9 ** 2)

    def testIsValid(self):
        o = Sudoku(sample(0, 'grid'))
        self.assertTrue(o.is_valid())

    def testNotIsValid(self):
        o = Sudoku(sample(0, 'grid'))
        o[0][0].value = 2
        self.assertFalse(o.is_valid())

    def testIsSolved(self):
        o = Sudoku(sample(0, 'solution'))
        self.assertTrue(o.is_solved())

    def testIsNotSolved(self):
        o = Sudoku(sample(0, 'solution'))
        o[0][0].value = 0
        self.assertFalse(o.is_solved())

    def testIsTSolved(self):
        o = Sudoku(sample(0, 'solution'))
        self.assertTrue(o.is_tsolved())
        v1 = o[0][0].value
        v2 = o[3][3].value
        o[0][0].value = o[3][3].value = 0
        o[0][0].tvalue = v1
        o[3][3].tvalue = v2
        self.assertFalse(o.is_solved())
        self.assertTrue(o.is_tsolved())

    def testIsNotTSolved(self):
        o = Sudoku(sample(0, 'solution'))
        o[0][0].value = 0
        self.assertFalse(o.is_tsolved())

    def testBlockFromXY(self):
        expected = [
            [[0, 0], [0, 0], [0, 0], [1, 0], [1, 0], [1, 0], [2, 0], [2, 0], [2, 0]],
            [[0, 0], [0, 0], [0, 0], [1, 0], [1, 0], [1, 0], [2, 0], [2, 0], [2, 0]],
            [[0, 0], [0, 0], [0, 0], [1, 0], [1, 0], [1, 0], [2, 0], [2, 0], [2, 0]],
            [[0, 1], [0, 1], [0, 1], [1, 1], [1, 1], [1, 1], [2, 1], [2, 1], [2, 1]],
            [[0, 1], [0, 1], [0, 1], [1, 1], [1, 1], [1, 1], [2, 1], [2, 1], [2, 1]],
            [[0, 1], [0, 1], [0, 1], [1, 1], [1, 1], [1, 1], [2, 1], [2, 1], [2, 1]],
            [[0, 2], [0, 2], [0, 2], [1, 2], [1, 2], [1, 2], [2, 2], [2, 2], [2, 2]],
            [[0, 2], [0, 2], [0, 2], [1, 2], [1, 2], [1, 2], [2, 2], [2, 2], [2, 2]],
            [[0, 2], [0, 2], [0, 2], [1, 2], [1, 2], [1, 2], [2, 2], [2, 2], [2, 2]],
        ]
        for x in range(len(expected)):
            for y in range(len(expected)):
                block_addr = Sudoku().block_from_xy(x, y)
                self.assertEqual(block_addr, tuple(expected[y][x]), 'X, Y ({}, {}) matched on the wrong M, Y ({}, {}).  Should be ({}, {}).'.format(x, y, block_addr[0], block_addr[1], expected[y][x][0], expected[y][x][1]))

    def testBlock(self):
        expected = [3, 8, 6, 4, 7, 5, 1, 9, 2]
        o = Sudoku(sample(0, 'solution'))
        self.assertEqual(o.block(2, 2), expected)

    def testColumn(self):
        expected = [1, 4, 5, 9, 3, 8, 7, 2, 6]
        o = Sudoku(sample(0, 'solution'))
        self.assertEqual(o.column(3), expected)

    def testRow(self):
        expected = [6, 7, 1, 5, 3, 8, 2, 4, 9]
        o = Sudoku(sample(0, 'solution'))
        self.assertEqual(o.row(2), expected)

    def testCreateGrid(self):
        expected = [[0] * 9] * 9
        grid = Sudoku.create_grid(9, 9)
        self.assertEqual(grid, expected)

    def testRepr(self):
        expected = '3 4 5 | 1 9 2 | 7 6 8\n9 2 8 | 4 7 6 | 5 3 1\n6 7 1 | 5 3 8 | 2 4 9\n---------------------\n2 1 3 | 9 6 4 | 8 5 7\n5 8 9 | 3 2 7 | 6 1 4\n7 6 4 | 8 1 5 | 9 2 3\n---------------------\n4 9 2 | 7 5 1 | 3 8 6\n1 3 6 | 2 8 9 | 4 7 5\n8 5 7 | 6 4 3 | 1 9 2\n'
        o = Sudoku(sample(0, 'solution'))
        self.assertEqual(str(o), expected)

    def testListForm(self):
        o = Sudoku(sample(0, 'solution'))
        self.assertEqual(list(o), sample(0, 'solution'))



class TestSudokuSolver(TestCase):
    def testSolverCreate(self):
        o = Sudoku(sample(0, 'grid'))
        s = SudokuSolver(o)
        self.assertEqual(o, s.game)

    def testFillNotes(self):
        o = Sudoku(sample(0, 'grid'))
        s = SudokuSolver(o)

        self.assertEqual(o[0][0].notes, set())
        s.fill_notes()
        self.assertEqual(o[0][0].notes, set([3, 8]))

    def testEvalCrossValues(self):
        o = Sudoku(sample(0, 'grid'))
        s = SudokuSolver(o)

        self.assertEqual(o[4][0], 0)
        s.fill_notes()
        s.eval_cross_values()
        self.assertEqual(o[4][0], 5)

    def testEvalExcludes(self):
        o = Sudoku(sample(0, 'grid'))
        s = SudokuSolver(o)
        
        self.assertEqual(o[6][5], 0)
        s.fill_notes()
        s.eval_excludes()
        self.assertEqual(o[6][5], 1)

    def testEvalLinearSets(self):
        o = Sudoku(sample(0, 'grid'))
        s = SudokuSolver(o)
        
        self.assertEqual(o[8][3], 0)
        s.fill_notes()
        s.eval_linear_sets()
        o[8][3].eval()
        self.assertEqual(o[8][3], 6)

    def testSolve(self):
        for i in range(len(sample_puzzles)):
            o = Sudoku(sample_puzzles[i])
            s = SudokuSolver(o)
            self.assertFalse(o.is_solved())
            s.solve()
            self.assertTrue(o.is_solved())

sample_puzzles = [
    [[0, 4, 1, 0, 0, 7, 0, 8, 0], [0, 5, 0, 8, 0, 4, 9, 0, 0], [0, 0, 7, 0, 0, 0, 3, 0, 0], [1, 0, 0, 0, 0, 5, 0, 0, 3], [0, 0, 0, 0, 2, 0, 0, 0, 0], [6, 0, 0, 9, 0, 0, 0, 0, 7], [0, 0, 3, 0, 0, 0, 4, 0, 0], [0, 0, 9, 5, 0, 2, 0, 3, 0], [0, 2, 0, 3, 0, 0, 5, 6, 0]],
    [[0, 4, 0, 1, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 9, 0, 6, 7], [6, 0, 0, 0, 2, 0, 5, 0, 0], [0, 2, 5, 0, 0, 4, 0, 0, 0], [7, 0, 1, 0, 0, 0, 4, 0, 6], [0, 0, 0, 7, 0, 0, 2, 5, 0], [0, 0, 4, 0, 9, 0, 0, 0, 2], [9, 7, 0, 8, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 1, 0, 4, 0]],
    [[0, 4, 5, 1, 0, 0, 7, 0, 0], [9, 0, 0, 0, 0, 0, 0, 0, 1], [6, 0, 0, 0, 3, 8, 0, 0, 0], [2, 0, 0, 0, 6, 0, 8, 0, 0], [0, 8, 9, 3, 0, 7, 6, 1, 0], [0, 0, 4, 0, 1, 0, 0, 0, 3], [0, 0, 0, 7, 5, 0, 0, 0, 6], [1, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 7, 0, 0, 3, 1, 9, 0]],
    [[0, 0, 0, 2, 0, 7, 0, 0, 5], [2, 5, 6, 0, 0, 0, 0, 7, 0], [9, 0, 0, 0, 0, 6, 0, 0, 0], [1, 9, 0, 6, 7, 0, 0, 4, 0], [8, 0, 0, 0, 0, 0, 0, 0, 6], [0, 3, 0, 0, 1, 8, 0, 5, 7], [0, 0, 0, 7, 0, 0, 0, 0, 2], [0, 1, 0, 0, 0, 0, 7, 3, 8], [7, 0, 0, 3, 0, 1, 0, 0, 0]],
    [[3, 0, 0, 0, 9, 0, 0, 0, 5], [0, 5, 6, 0, 3, 0, 0, 7, 1], [0, 8, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 4, 3], [0, 0, 5, 0, 2, 0, 1, 0, 0], [6, 3, 0, 9, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 1, 0], [4, 1, 0, 0, 6, 0, 7, 3, 0], [7, 0, 0, 0, 4, 0, 0, 0, 9]],
    [[3, 0, 1, 2, 0, 0, 0, 8, 5], [2, 5, 0, 0, 0, 4, 9, 0, 0], [0, 0, 0, 0, 5, 0, 0, 2, 4], [0, 9, 0, 6, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 5, 0], [5, 6, 0, 0, 8, 0, 0, 0, 0], [0, 0, 9, 5, 0, 0, 0, 3, 8], [7, 2, 0, 0, 0, 1, 5, 0, 9]],
    [[0, 2, 0, 0, 9, 0, 0, 0, 0], [5, 3, 0, 4, 0, 0, 0, 8, 6], [0, 0, 0, 0, 0, 7, 0, 0, 0], [6, 0, 0, 0, 8, 3, 0, 2, 1], [0, 8, 0, 0, 0, 0, 0, 9, 0], [7, 1, 0, 9, 6, 0, 0, 0, 8], [0, 0, 0, 8, 0, 0, 0, 0, 0], [2, 6, 0, 0, 0, 5, 0, 1, 4], [0, 0, 0, 0, 2, 0, 0, 7, 0]],
    [[3, 0, 1, 0, 9, 0, 6, 8, 0], [2, 5, 0, 0, 0, 4, 0, 0, 1], [0, 0, 0, 1, 0, 0, 3, 0, 0], [0, 9, 2, 0, 0, 0, 0, 0, 3], [0, 0, 5, 0, 2, 0, 1, 0, 0], [6, 0, 0, 0, 0, 0, 2, 5, 0], [0, 0, 3, 0, 0, 9, 0, 0, 0], [4, 0, 0, 5, 0, 0, 0, 3, 8], [0, 2, 8, 0, 4, 0, 5, 0, 9]],
    [[3, 0, 0, 2, 0, 0, 6, 0, 5], [0, 0, 0, 0, 3, 0, 0, 0, 0], [9, 8, 0, 0, 0, 6, 0, 0, 0], [0, 0, 2, 0, 0, 0, 8, 4, 0], [8, 7, 0, 0, 0, 0, 0, 9, 6], [0, 3, 4, 0, 0, 0, 2, 0, 0], [0, 0, 0, 7, 0, 0, 0, 1, 2], [0, 0, 0, 0, 6, 0, 0, 0, 0], [7, 0, 8, 0, 0, 1, 0, 0, 9]],
    [[0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 8, 0, 4, 9, 0, 1], [0, 0, 0, 1, 0, 6, 3, 2, 0], [0, 0, 0, 0, 0, 5, 0, 4, 0], [8, 0, 0, 4, 2, 3, 0, 0, 6], [0, 3, 0, 9, 0, 0, 0, 0, 0], [0, 6, 3, 7, 0, 9, 0, 0, 0], [4, 0, 9, 5, 0, 2, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
    [[0, 0, 7, 0, 0, 0, 0, 9, 0], [0, 6, 0, 0, 8, 0, 3, 0, 0], [3, 9, 0, 2, 0, 7, 0, 0, 5], [0, 0, 0, 4, 0, 0, 0, 0, 2], [0, 1, 0, 0, 9, 0, 0, 8, 0], [5, 0, 0, 0, 0, 3, 0, 0, 0], [6, 0, 0, 9, 0, 2, 0, 7, 1], [0, 0, 3, 0, 4, 0, 0, 5, 0], [0, 2, 0, 0, 0, 0, 6, 0, 0]],
    [[8, 0, 0, 7, 6, 0, 0, 0, 3], [0, 0, 7, 0, 5, 0, 0, 1, 0], [0, 4, 0, 0, 0, 0, 2, 0, 0], [9, 8, 0, 6, 0, 0, 7, 0, 0], [0, 0, 4, 0, 8, 0, 9, 0, 0], [0, 0, 1, 0, 0, 9, 0, 3, 8], [0, 0, 8, 0, 0, 0, 0, 2, 0], [0, 5, 0, 0, 2, 0, 1, 0, 0], [2, 0, 0, 0, 9, 4, 0, 0, 7]],
    [[3, 0, 0, 0, 0, 0, 0, 0, 5], [0, 5, 6, 0, 3, 4, 0, 7, 0], [9, 0, 0, 1, 0, 0, 3, 2, 0], [1, 9, 0, 0, 7, 0, 0, 0, 0], [0, 0, 5, 4, 2, 3, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 5, 7], [0, 6, 3, 0, 0, 9, 0, 0, 2], [0, 1, 0, 5, 6, 0, 7, 3, 0], [7, 0, 0, 0, 0, 0, 0, 0, 9]],
    [[3, 0, 0, 0, 0, 7, 0, 8, 5], [0, 0, 6, 8, 0, 0, 9, 0, 0], [0, 8, 7, 0, 5, 0, 3, 0, 0], [0, 0, 0, 0, 0, 5, 8, 0, 3], [0, 0, 0, 0, 2, 0, 0, 0, 0], [6, 0, 4, 9, 0, 0, 0, 0, 0], [0, 0, 3, 0, 8, 0, 4, 1, 0], [0, 0, 9, 0, 0, 2, 7, 0, 0], [7, 2, 0, 3, 0, 0, 0, 0, 9]],
    [[0, 0, 6, 0, 0, 5, 0, 0, 0], [0, 5, 0, 0, 1, 9, 0, 0, 2], [7, 0, 1, 4, 0, 0, 9, 0, 0], [1, 0, 5, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 7, 0, 0, 0, 0, 6, 0, 3], [0, 0, 3, 0, 0, 1, 2, 0, 6], [8, 0, 0, 9, 5, 0, 0, 4, 0], [0, 0, 0, 2, 0, 0, 1, 0, 0]],
    [[0, 6, 0, 0, 5, 7, 9, 0, 0], [0, 7, 0, 0, 2, 0, 0, 0, 6], [8, 0, 0, 0, 6, 0, 0, 7, 0], [0, 0, 7, 1, 0, 0, 0, 8, 0], [0, 0, 5, 0, 0, 0, 4, 0, 0], [0, 8, 0, 0, 0, 4, 3, 0, 0], [0, 9, 0, 0, 1, 0, 0, 0, 4], [2, 0, 0, 0, 3, 0, 0, 9, 0], [0, 0, 8, 7, 4, 0, 0, 5, 0]],
    [[3, 0, 1, 0, 0, 7, 0, 0, 0], [2, 0, 6, 8, 0, 0, 0, 0, 1], [0, 0, 7, 0, 5, 0, 3, 0, 0], [0, 0, 2, 6, 0, 0, 8, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 4, 0, 0, 8, 2, 0, 0], [0, 0, 3, 0, 8, 0, 4, 0, 0], [4, 0, 0, 0, 0, 2, 7, 0, 8], [0, 0, 0, 3, 0, 0, 5, 0, 9]],
    [[0, 0, 0, 0, 9, 7, 0, 8, 0], [2, 0, 6, 0, 0, 4, 9, 0, 1], [9, 0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 8, 0, 3], [8, 0, 0, 0, 2, 0, 0, 0, 6], [6, 0, 4, 0, 0, 0, 0, 0, 7], [0, 0, 0, 0, 0, 9, 0, 0, 2], [4, 0, 9, 5, 0, 0, 7, 0, 8], [0, 2, 0, 3, 4, 0, 0, 0, 0]],
    [[0, 0, 0, 0, 0, 3, 0, 0, 0], [8, 0, 1, 9, 5, 0, 0, 0, 0], [3, 2, 0, 8, 6, 0, 0, 4, 0], [0, 8, 4, 0, 0, 0, 0, 3, 7], [0, 1, 0, 0, 0, 0, 0, 6, 0], [7, 6, 0, 0, 0, 0, 8, 5, 0], [0, 7, 0, 0, 2, 9, 0, 8, 1], [0, 0, 0, 0, 7, 6, 5, 0, 4], [0, 0, 0, 5, 0, 0, 0, 0, 0]],
    [[0, 0, 6, 9, 0, 0, 3, 0, 0], [5, 0, 0, 0, 0, 0, 0, 0, 4], [0, 0, 0, 7, 3, 0, 2, 0, 1], [0, 0, 1, 4, 0, 0, 0, 0, 2], [8, 0, 0, 6, 0, 2, 0, 0, 5], [4, 0, 0, 0, 0, 7, 1, 0, 0], [3, 0, 8, 0, 4, 9, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 7, 0, 0, 3, 9, 0, 0]],
    [[0, 0, 0, 7, 6, 0, 0, 0, 3], [4, 5, 0, 0, 0, 0, 6, 0, 0], [8, 0, 3, 0, 4, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0, 7, 0, 2], [0, 0, 0, 8, 7, 4, 0, 0, 0], [6, 0, 8, 0, 0, 0, 0, 0, 4], [0, 0, 0, 0, 9, 0, 5, 0, 6], [0, 0, 9, 0, 0, 0, 0, 3, 8], [3, 0, 0, 0, 8, 1, 0, 0, 0]],
    [[0, 0, 2, 3, 0, 0, 8, 0, 0], [0, 7, 0, 0, 0, 6, 0, 0, 9], [5, 0, 0, 0, 0, 1, 0, 0, 0], [4, 8, 7, 0, 0, 0, 0, 0, 1], [0, 0, 5, 0, 8, 0, 2, 0, 0], [6, 0, 0, 0, 0, 0, 7, 8, 4], [0, 0, 0, 9, 0, 0, 0, 0, 5], [7, 0, 0, 5, 0, 0, 0, 3, 0], [0, 0, 8, 0, 0, 3, 6, 0, 0]],
    [[3, 0, 1, 0, 9, 0, 0, 0, 0], [0, 0, 6, 8, 0, 0, 0, 0, 0], [0, 8, 0, 0, 5, 0, 3, 0, 4], [1, 0, 0, 0, 0, 5, 8, 0, 0], [8, 0, 0, 0, 2, 0, 0, 0, 6], [0, 0, 4, 9, 0, 0, 0, 0, 7], [5, 0, 3, 0, 8, 0, 0, 1, 0], [0, 0, 0, 0, 0, 2, 7, 0, 0], [0, 0, 0, 0, 4, 0, 5, 0, 9]],
    [[0, 0, 0, 0, 4, 0, 3, 1, 6], [0, 0, 0, 8, 0, 0, 0, 5, 0], [5, 1, 0, 0, 0, 6, 0, 0, 8], [9, 0, 0, 0, 0, 0, 0, 4, 7], [0, 3, 1, 0, 0, 0, 6, 9, 0], [4, 6, 0, 0, 0, 0, 0, 0, 5], [1, 0, 0, 3, 0, 0, 0, 7, 4], [0, 7, 0, 0, 0, 5, 0, 0, 0], [3, 5, 2, 0, 7, 0, 0, 0, 0]],
    [[0, 0, 4, 0, 6, 0, 0, 3, 2], [2, 0, 0, 9, 0, 0, 4, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0], [5, 0, 0, 3, 2, 0, 9, 6, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 2, 9, 0, 5, 4, 0, 0, 8], [0, 0, 0, 0, 9, 0, 0, 0, 0], [0, 0, 6, 0, 0, 8, 0, 0, 1], [1, 8, 0, 0, 4, 0, 5, 0, 0]],
    [[0, 0, 4, 7, 0, 0, 0, 0, 9], [9, 6, 0, 0, 0, 8, 4, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 2], [0, 0, 0, 4, 0, 0, 0, 0, 7], [0, 5, 0, 8, 9, 7, 0, 4, 0], [7, 0, 0, 0, 0, 6, 0, 0, 0], [4, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 9, 1, 0, 0, 0, 8, 6], [6, 0, 0, 0, 0, 9, 7, 0, 0]],
    [[3, 6, 0, 0, 1, 9, 0, 0, 7], [0, 7, 0, 2, 0, 0, 1, 0, 0], [8, 0, 0, 0, 0, 0, 0, 3, 0], [0, 1, 0, 0, 0, 7, 4, 0, 0], [7, 0, 0, 1, 0, 3, 0, 0, 5], [0, 0, 4, 9, 0, 0, 0, 1, 0], [0, 5, 0, 0, 0, 0, 0, 0, 1], [0, 0, 3, 0, 0, 1, 0, 7, 0], [1, 0, 0, 6, 5, 0, 0, 8, 9]],
    [[0, 0, 0, 0, 0, 0, 0, 8, 7], [0, 3, 0, 1, 0, 0, 5, 0, 6], [0, 8, 0, 5, 9, 0, 3, 0, 1], [0, 0, 4, 8, 0, 0, 0, 3, 5], [0, 0, 0, 0, 4, 0, 0, 0, 0], [3, 7, 0, 0, 0, 5, 8, 0, 0], [8, 0, 7, 0, 1, 2, 0, 5, 0], [1, 0, 3, 0, 0, 4, 0, 7, 0], [9, 4, 0, 0, 0, 0, 0, 0, 0]],
    [[3, 4, 0, 2, 0, 0, 0, 0, 0], [0, 0, 6, 8, 3, 0, 0, 7, 1], [0, 8, 0, 0, 0, 6, 3, 0, 4], [1, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 4, 2, 3, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 7], [5, 0, 3, 7, 0, 0, 0, 1, 0], [4, 1, 0, 0, 6, 2, 7, 0, 0], [0, 0, 0, 0, 0, 1, 0, 6, 9]],
    [[0, 0, 0, 0, 0, 0, 4, 1, 9], [0, 0, 0, 2, 0, 0, 0, 6, 0], [0, 0, 0, 0, 1, 7, 0, 8, 2], [0, 1, 0, 0, 6, 0, 0, 0, 3], [0, 3, 0, 5, 0, 1, 0, 9, 0], [2, 0, 0, 0, 8, 0, 0, 5, 0], [8, 5, 0, 6, 9, 0, 0, 0, 0], [0, 7, 0, 0, 0, 5, 0, 0, 0], [3, 4, 6, 0, 0, 0, 0, 0, 0]],
    [[0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 4, 1, 9, 0, 7, 0], [0, 0, 1, 0, 8, 0, 4, 6, 0], [0, 7, 0, 1, 0, 0, 0, 9, 0], [4, 0, 2, 0, 0, 0, 5, 0, 7], [0, 6, 0, 0, 0, 4, 0, 2, 0], [0, 9, 7, 0, 5, 0, 2, 0, 0], [0, 8, 0, 3, 4, 6, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0]],
    [[0, 0, 6, 0, 1, 0, 0, 0, 3], [0, 0, 0, 6, 0, 3, 0, 0, 0], [0, 0, 7, 0, 0, 4, 1, 0, 0], [6, 0, 2, 0, 3, 8, 4, 0, 9], [0, 9, 0, 0, 0, 0, 0, 8, 0], [3, 0, 8, 1, 4, 0, 6, 0, 2], [0, 0, 1, 3, 0, 0, 9, 0, 0], [0, 0, 0, 8, 0, 6, 0, 0, 0], [7, 0, 0, 0, 5, 0, 8, 0, 0]],
    [[0, 0, 0, 7, 0, 5, 0, 2, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 9, 4, 6], [8, 0, 6, 0, 7, 0, 0, 1, 0], [0, 1, 0, 4, 6, 9, 0, 5, 0], [0, 4, 0, 0, 2, 0, 6, 0, 7], [1, 9, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 5, 0, 2, 0, 1, 0, 0, 0]],
    [[0, 0, 1, 0, 0, 7, 0, 8, 5], [2, 0, 0, 0, 0, 4, 0, 0, 1], [0, 0, 0, 0, 0, 0, 3, 2, 0], [1, 0, 0, 6, 0, 5, 0, 0, 0], [8, 0, 0, 0, 2, 0, 0, 0, 6], [0, 0, 0, 9, 0, 8, 0, 0, 7], [0, 6, 3, 0, 0, 0, 0, 0, 0], [4, 0, 0, 5, 0, 0, 0, 0, 8], [7, 2, 0, 3, 0, 0, 5, 0, 0]],
    [[4, 2, 0, 0, 0, 0, 8, 9, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 9, 0, 0, 6, 0], [0, 0, 0, 7, 0, 2, 6, 0, 0], [0, 3, 0, 4, 8, 9, 0, 7, 0], [0, 0, 7, 5, 0, 3, 0, 0, 0], [0, 4, 0, 0, 7, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 8, 1, 0, 0, 0, 0, 2, 4]],
    [[0, 2, 8, 0, 1, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 7, 0, 0, 0, 2, 8], [7, 0, 0, 0, 0, 1, 0, 9, 0], [0, 4, 6, 8, 0, 9, 7, 3, 0], [0, 8, 0, 4, 0, 0, 0, 0, 1], [4, 9, 0, 0, 0, 6, 0, 8, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 9, 0, 6, 1, 0]],
    [[7, 2, 0, 0, 6, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0], [0, 8, 0, 4, 9, 0, 0, 1, 0], [4, 0, 7, 0, 0, 2, 0, 0, 0], [0, 6, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 3, 0, 0, 9, 0, 4], [0, 7, 0, 0, 8, 4, 0, 6, 0], [0, 0, 9, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 3, 0, 0, 2, 7]],
    [[3, 0, 0, 2, 0, 7, 6, 0, 0], [2, 5, 0, 8, 0, 4, 9, 0, 0], [0, 8, 0, 1, 0, 0, 3, 0, 4], [0, 9, 0, 0, 0, 0, 0, 0, 3], [0, 0, 5, 4, 0, 3, 1, 0, 0], [6, 0, 0, 0, 0, 0, 0, 5, 0], [5, 0, 3, 0, 0, 9, 0, 1, 0], [0, 0, 9, 5, 0, 2, 0, 3, 8], [0, 0, 8, 3, 0, 1, 0, 0, 9]],
    [[0, 0, 5, 0, 0, 2, 1, 0, 0], [7, 0, 4, 0, 0, 0, 0, 0, 0], [0, 9, 0, 3, 0, 5, 0, 0, 4], [0, 3, 0, 0, 1, 0, 0, 0, 7], [0, 0, 7, 8, 0, 9, 3, 0, 0], [5, 0, 0, 0, 2, 0, 0, 8, 0], [2, 0, 0, 9, 0, 7, 0, 4, 0], [0, 0, 0, 0, 0, 0, 2, 0, 5], [0, 0, 6, 2, 0, 0, 8, 0, 0]],
    [[5, 0, 2, 0, 0, 6, 0, 0, 0], [0, 0, 0, 8, 0, 0, 4, 0, 0], [9, 0, 0, 0, 4, 0, 0, 6, 1], [0, 0, 0, 0, 0, 3, 0, 0, 7], [8, 0, 1, 0, 9, 0, 6, 0, 5], [2, 0, 0, 1, 0, 0, 0, 0, 0], [6, 8, 0, 0, 2, 0, 0, 0, 9], [0, 0, 5, 0, 0, 4, 0, 0, 0], [0, 0, 0, 6, 0, 0, 7, 0, 4]],
    [[3, 0, 0, 0, 0, 7, 0, 8, 5], [2, 0, 6, 8, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 0, 3, 2, 0], [1, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 5, 4, 0, 3, 1, 0, 0], [0, 0, 0, 9, 0, 0, 0, 0, 7], [0, 6, 3, 0, 0, 0, 0, 0, 0], [0, 0, 9, 0, 0, 2, 7, 0, 8], [7, 2, 0, 3, 0, 0, 0, 0, 9]],
    [[8, 7, 0, 4, 0, 0, 6, 0, 0], [0, 4, 0, 0, 8, 0, 0, 1, 9], [0, 0, 0, 0, 5, 0, 0, 4, 0], [0, 5, 0, 3, 1, 0, 0, 0, 2], [0, 2, 4, 0, 0, 0, 7, 3, 0], [7, 0, 0, 0, 4, 2, 0, 8, 0], [0, 8, 0, 0, 3, 0, 0, 0, 0], [3, 9, 0, 0, 7, 0, 0, 6, 0], [0, 0, 1, 0, 0, 4, 0, 7, 8]],
    [[0, 0, 0, 0, 7, 9, 0, 0, 0], [0, 0, 5, 1, 0, 0, 0, 0, 9], [9, 0, 0, 3, 0, 0, 0, 7, 0], [4, 0, 0, 0, 1, 0, 5, 0, 0], [0, 5, 9, 4, 3, 6, 7, 8, 0], [0, 0, 1, 0, 9, 0, 0, 0, 4], [0, 6, 0, 0, 0, 1, 0, 0, 5], [5, 0, 0, 0, 0, 8, 2, 0, 0], [0, 0, 0, 2, 5, 0, 0, 0, 0]],
    [[2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 9, 0, 8, 0], [3, 5, 0, 0, 0, 1, 4, 0, 2], [1, 0, 0, 9, 0, 5, 0, 0, 0], [0, 7, 0, 0, 1, 0, 0, 3, 0], [0, 0, 0, 7, 0, 8, 0, 0, 6], [4, 0, 9, 1, 0, 0, 0, 6, 8], [0, 8, 0, 2, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5]],
    [[3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 4, 0, 7, 0], [9, 0, 0, 0, 5, 0, 0, 0, 4], [0, 0, 2, 0, 7, 0, 8, 0, 3], [8, 0, 0, 0, 2, 0, 0, 0, 6], [6, 0, 4, 0, 1, 0, 2, 0, 0], [5, 0, 0, 0, 8, 0, 0, 0, 2], [0, 1, 0, 5, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9]],
    [[0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 8, 3, 4, 0, 0, 1], [0, 8, 0, 0, 0, 0, 3, 2, 4], [1, 0, 0, 0, 7, 5, 0, 4, 0], [8, 7, 0, 0, 0, 0, 0, 9, 6], [0, 3, 0, 9, 1, 0, 0, 0, 7], [5, 6, 3, 0, 0, 0, 0, 1, 0], [4, 0, 0, 5, 6, 2, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
    [[0, 3, 5, 0, 1, 8, 0, 0, 4], [0, 0, 2, 5, 4, 0, 1, 6, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 8, 1, 2, 9, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 2, 9, 3, 6, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 7, 3, 0, 5, 2, 6, 0, 0], [4, 0, 0, 8, 9, 0, 7, 3, 0]],
    [[0, 0, 3, 1, 0, 8, 0, 7, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 7, 0, 0, 4, 8, 9, 3], [0, 3, 0, 0, 8, 0, 0, 0, 9], [0, 7, 9, 0, 0, 0, 3, 8, 0], [5, 0, 0, 0, 3, 0, 0, 4, 0], [7, 2, 6, 9, 0, 0, 5, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 8, 0, 7, 0, 6, 9, 0, 0]],
    [[3, 0, 0, 2, 0, 7, 0, 0, 5], [0, 0, 0, 8, 0, 0, 9, 0, 0], [0, 0, 7, 1, 0, 0, 0, 2, 4], [0, 0, 0, 0, 7, 5, 8, 0, 0], [8, 0, 0, 4, 0, 3, 0, 0, 6], [0, 0, 4, 9, 1, 0, 0, 0, 0], [5, 6, 0, 0, 0, 9, 4, 0, 0], [0, 0, 9, 0, 0, 2, 0, 0, 0], [7, 0, 0, 3, 0, 1, 0, 0, 9]],
    [[0, 0, 0, 0, 0, 7, 6, 0, 0], [2, 0, 0, 8, 0, 0, 0, 7, 1], [9, 0, 0, 1, 5, 0, 0, 0, 4], [0, 0, 0, 6, 7, 0, 0, 0, 0], [8, 0, 0, 4, 0, 3, 0, 0, 6], [0, 0, 0, 0, 1, 8, 0, 0, 0], [5, 0, 0, 0, 8, 9, 0, 0, 2], [4, 1, 0, 0, 0, 2, 0, 0, 8], [0, 0, 8, 3, 0, 0, 0, 0, 0]],
    [[3, 0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 6, 8, 3, 4, 0, 7, 0], [0, 0, 0, 1, 0, 0, 0, 2, 0], [0, 0, 0, 6, 0, 0, 0, 4, 0], [8, 0, 0, 4, 2, 3, 0, 0, 6], [0, 3, 0, 0, 0, 8, 0, 0, 0], [0, 6, 0, 0, 0, 9, 0, 0, 0], [0, 1, 0, 5, 6, 2, 7, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 9]],
    [[0, 0, 0, 6, 2, 0, 0, 0, 0], [0, 2, 9, 0, 3, 4, 6, 0, 0], [0, 0, 3, 8, 0, 0, 0, 2, 0], [1, 0, 0, 0, 0, 0, 0, 7, 0], [9, 0, 8, 0, 4, 0, 5, 0, 6], [0, 3, 0, 0, 0, 0, 0, 0, 2], [0, 9, 0, 0, 0, 8, 3, 0, 0], [0, 0, 6, 2, 9, 0, 8, 5, 0], [0, 0, 0, 0, 1, 5, 0, 0, 0]],
    [[0, 0, 0, 0, 0, 3, 0, 5, 0], [5, 0, 0, 0, 6, 0, 9, 0, 3], [0, 0, 3, 8, 0, 0, 4, 0, 7], [8, 0, 0, 0, 0, 0, 6, 0, 0], [0, 1, 2, 6, 0, 4, 8, 3, 0], [0, 0, 4, 0, 0, 0, 0, 0, 2], [1, 0, 9, 0, 0, 2, 5, 0, 0], [7, 0, 5, 0, 8, 0, 0, 0, 1], [0, 3, 0, 5, 0, 0, 0, 0, 0]],
    [[8, 0, 0, 0, 5, 0, 0, 1, 0], [0, 0, 1, 8, 0, 0, 0, 4, 3], [3, 2, 0, 0, 0, 1, 0, 0, 7], [2, 0, 0, 6, 8, 0, 0, 0, 0], [7, 0, 0, 2, 0, 4, 0, 0, 8], [0, 0, 0, 0, 3, 5, 0, 0, 2], [6, 0, 0, 5, 0, 0, 0, 9, 1], [1, 8, 0, 0, 0, 6, 7, 0, 0], [0, 3, 0, 0, 1, 0, 0, 0, 6]],
    [[0, 7, 9, 6, 0, 0, 3, 0, 0], [8, 4, 0, 0, 1, 2, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0], [5, 0, 0, 0, 0, 3, 7, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 7, 1, 0, 0, 0, 0, 6], [0, 0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 5, 2, 0, 0, 8, 3], [0, 0, 1, 0, 0, 4, 5, 7, 0]],
    [[0, 4, 0, 2, 9, 7, 0, 0, 0], [2, 0, 6, 0, 0, 0, 0, 0, 0], [0, 8, 0, 1, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 5, 0, 0, 3], [8, 7, 0, 4, 0, 3, 0, 9, 6], [6, 0, 0, 9, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 9, 0, 1, 0], [0, 0, 0, 0, 0, 0, 7, 0, 8], [0, 0, 0, 3, 4, 1, 0, 6, 0]],
    [[0, 0, 0, 2, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 4, 9, 0, 0], [0, 0, 0, 0, 5, 6, 3, 0, 4], [1, 0, 0, 0, 0, 0, 8, 0, 0], [8, 7, 0, 0, 2, 0, 0, 9, 6], [0, 0, 4, 0, 0, 0, 0, 0, 7], [5, 0, 3, 7, 8, 0, 0, 0, 0], [0, 0, 9, 5, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 1, 0, 0, 0]],
    [[0, 2, 3, 0, 0, 0, 0, 5, 4], [5, 0, 0, 3, 4, 9, 0, 0, 0], [0, 8, 0, 0, 5, 2, 9, 0, 0], [0, 6, 0, 5, 0, 1, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 7, 0, 6, 0, 4, 0], [0, 0, 5, 2, 1, 0, 0, 7, 0], [0, 0, 0, 9, 7, 3, 0, 0, 1], [7, 3, 0, 0, 0, 0, 4, 9, 0]],
    [[0, 0, 0, 0, 3, 0, 0, 0, 0], [5, 0, 0, 9, 0, 4, 0, 0, 6], [0, 0, 0, 0, 0, 1, 7, 5, 0], [6, 3, 0, 0, 2, 0, 0, 4, 0], [9, 0, 0, 0, 0, 0, 0, 0, 1], [0, 7, 0, 0, 6, 0, 0, 8, 2], [0, 1, 7, 2, 0, 0, 0, 0, 0], [4, 0, 0, 8, 0, 5, 0, 0, 9], [0, 0, 0, 0, 4, 0, 0, 0, 0]],
    [[6, 0, 7, 9, 5, 0, 0, 0, 1], [0, 0, 2, 0, 8, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0, 0, 5, 0], [0, 0, 5, 7, 0, 0, 0, 4, 9], [8, 0, 0, 0, 1, 0, 0, 0, 6], [9, 7, 0, 0, 0, 5, 1, 0, 0], [0, 9, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 9, 0, 8, 0, 0], [5, 0, 0, 0, 2, 1, 9, 0, 7]],
    [[3, 0, 0, 2, 0, 7, 0, 0, 5], [0, 5, 0, 0, 0, 0, 0, 0, 0], [9, 0, 7, 1, 0, 6, 0, 0, 0], [0, 0, 2, 0, 0, 0, 8, 4, 0], [8, 0, 0, 0, 0, 0, 0, 0, 6], [0, 3, 4, 0, 0, 0, 2, 0, 0], [0, 0, 0, 7, 0, 9, 4, 0, 2], [0, 0, 0, 0, 0, 0, 0, 3, 0], [7, 0, 0, 3, 0, 1, 0, 0, 9]],
    [[3, 4, 0, 0, 0, 7, 0, 0, 5], [0, 0, 0, 8, 0, 0, 0, 0, 1], [0, 8, 7, 0, 0, 0, 0, 2, 0], [1, 0, 0, 0, 7, 5, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 9, 1, 0, 0, 0, 7], [0, 6, 0, 0, 0, 0, 4, 1, 0], [4, 0, 0, 0, 0, 2, 0, 0, 0], [7, 0, 0, 3, 0, 0, 0, 6, 9]],
    [[5, 0, 9, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 1, 4, 0, 3], [0, 4, 0, 0, 2, 0, 5, 0, 1], [7, 0, 0, 3, 0, 4, 0, 2, 0], [0, 2, 0, 0, 1, 0, 0, 3, 0], [0, 9, 0, 2, 0, 7, 0, 0, 6], [2, 0, 4, 0, 3, 0, 0, 7, 0], [1, 0, 8, 4, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 6, 0, 4]],
    [[3, 4, 1, 2, 9, 0, 0, 0, 0], [2, 0, 0, 8, 3, 0, 9, 0, 0], [9, 0, 0, 0, 0, 6, 0, 0, 0], [0, 9, 0, 0, 0, 0, 0, 0, 3], [0, 7, 5, 0, 0, 0, 1, 9, 0], [6, 0, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 7, 0, 0, 0, 0, 2], [0, 0, 9, 0, 6, 2, 0, 0, 8], [0, 0, 0, 0, 4, 1, 5, 6, 9]],
    [[3, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 6, 8, 0, 4, 9, 0, 0], [0, 0, 7, 0, 0, 6, 0, 0, 0], [0, 0, 2, 0, 7, 5, 8, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 4, 9, 1, 0, 2, 0, 0], [0, 0, 0, 7, 0, 0, 4, 0, 0], [0, 0, 9, 5, 0, 2, 7, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 9]],
    [[3, 0, 0, 2, 9, 0, 6, 0, 5], [0, 5, 0, 0, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 6, 0, 0, 4], [1, 0, 0, 0, 7, 5, 0, 4, 0], [0, 0, 5, 0, 0, 0, 1, 0, 0], [0, 3, 0, 9, 1, 0, 0, 0, 7], [5, 0, 0, 7, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 3, 0], [7, 0, 8, 0, 4, 1, 0, 0, 9]],
]


if __name__ == '__main__':
    main()
